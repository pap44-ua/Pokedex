{
	"info": {
		"_postman_id": "e6e4a10e-1b38-42cc-ae95-5829ad7eace5",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30672981"
	},
	"item": [
		{
			"name": "buscarPok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that numeroPokedex is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.numeroPokedex).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.numeroPokedex).to.be.at.least(0, \"Value should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that nombre is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.nombre).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that pS is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.pS).to.be.a('number');",
							"    pm.expect(responseData.pS).to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Validate that atk is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.atk).to.be.a('number');",
							"    pm.expect(responseData.atk).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemon/buscar/Charizard",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemon",
						"buscar",
						"Charizard"
					]
				}
			},
			"response": []
		},
		{
			"name": "evolucionPok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - nombre\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property(\"nombre\");",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemon/3/evolucion",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemon",
						"3",
						"evolucion"
					]
				}
			},
			"response": []
		},
		{
			"name": "randomPok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - numeroPokedex\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.numeroPokedex).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'nombre' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.nombre).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'numeroPokedex' is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.numeroPokedex).to.be.a('number');",
							"  pm.expect(responseData.numeroPokedex).to.be.at.least(0, \"Value should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemon/random",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemon",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "filtrarTipo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json().pokemons;",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the response has the required fields\", function () {",
							"    const responseData = pm.response.json().pokemons;",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function (element) {",
							"        pm.expect(element.nombre).to.exist.and.to.be.a('string');",
							"        pm.expect(element.tipo1).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The nombre field is a non-empty string\", function () {",
							"    const responseData = pm.response.json().pokemons;",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(pokemon) {",
							"        pm.expect(pokemon.nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemon/tipo/FIRE",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemon",
						"tipo",
						"FIRE"
					]
				}
			},
			"response": []
		},
		{
			"name": "verPerfilMod",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.Usuario).to.exist;",
							"  pm.expect(responseData.Nombre).to.exist;",
							"  pm.expect(responseData.email).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Usuario is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.Usuario).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Nombre is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.Nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJVc3VhcmlvIjoicGF1IiwiQ29udHJhc2VuYSI6IjEyMyJ9.b-2p100wkv1y2eWPURJsmXTLpxog-X_kIWgz-XK3cHbwSrzb5AmPivOMGx8BZb9Fl3HVmp3aym3GB7ejEdVnyw",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:3000/moderador/ver/pau",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"moderador",
						"ver",
						"pau"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token is in the correct format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.token).to.exist.and.to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/, \"Token is not in the correct format\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Usuario\": \"pau\",\n  \"Contrasena\": \"123\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/moderador/login",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"moderador",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "crearPok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the created Pokemon is stored in the database\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJVc3VhcmlvIjoicGF1IiwiQ29udHJhc2VuYSI6IjEyMyJ9.b-2p100wkv1y2eWPURJsmXTLpxog-X_kIWgz-XK3cHbwSrzb5AmPivOMGx8BZb9Fl3HVmp3aym3GB7ejEdVnyw",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nombre\": \"Pikachu\",\n  \"pS\": 35,\n  \"atk\": 55,\n  \"def\": 40,\n  \"SpAtk\": 50,\n  \"SpDef\": 50,\n  \"Spe\": 90,\n  \"tipo1\": \"ELECTRIC\",\n  \"tipo2\": null,\n  \"evolucion\": null,\n  \"descripcion\": \"Ratón eléctrico amarillo.\",\n  \"habilidad\": 7\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/pokemon/crear",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemon",
						"crear"
					]
				}
			},
			"response": []
		},
		{
			"name": "actualizarPok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Message field is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Message field is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJVc3VhcmlvIjoicGF1IiwiQ29udHJhc2VuYSI6IjEyMyJ9.b-2p100wkv1y2eWPURJsmXTLpxog-X_kIWgz-XK3cHbwSrzb5AmPivOMGx8BZb9Fl3HVmp3aym3GB7ejEdVnyw",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nombre\": \"Ivysaur\",\n  \"pS\": 35,\n  \"atk\": 55,\n  \"def\": 40,\n  \"SpAtk\": 50,\n  \"SpDef\": 50,\n  \"Spe\": 90,\n  \"tipo1\": \"GRASS\",\n  \"tipo2\": \"POISON\",\n  \"evolucion\": null,\n  \"descripcion\": \"Lechuga viviente.\",\n  \"habilidad\": 7\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/pokemon/actualizar/2",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemon",
						"actualizar",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "borrarPok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Value of 'message' is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the message is 'Pokemon deleted successfully'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.equal(\"Pokemon deleted successfully\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJVc3VhcmlvIjoicGF1IiwiQ29udHJhc2VuYSI6IjEyMyJ9.b-2p100wkv1y2eWPURJsmXTLpxog-X_kIWgz-XK3cHbwSrzb5AmPivOMGx8BZb9Fl3HVmp3aym3GB7ejEdVnyw",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:3000/pokemon/borrar/24",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemon",
						"borrar",
						"24"
					]
				}
			},
			"response": []
		}
	]
}